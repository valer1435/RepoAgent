import inspect
import logging
import sys
from loguru import logger
logger = logger.opt(colors=True)
'\nRepoAgent 日志记录器对象。\n\n默认信息:\n- 格式: `[%(asctime)s %(name)s] %(levelname)s: %(message)s`\n- 等级: `INFO` ，根据 `CONFIG["log_level"]` 配置改变\n- 输出: 输出至 stdout\n\n用法示例:\n    ```python\n    from repo_agent.log import logger\n    \n    # 基本消息记录\n    logger.info("It <green>works</>!") # 使用颜色\n\n    # 记录异常信息\n    try:\n        1 / 0\n    except ZeroDivisionError:\n        # 使用 `logger.exception` 可以在记录异常消息时自动附加异常的堆栈跟踪信息。\n        logger.exception("ZeroDivisionError occurred")\n\n    # 记录调试信息\n    logger.debug(f"Debugging info: {some_debug_variable}")\n\n    # 记录警告信息\n    logger.warning("This is a warning message")\n\n    # 记录错误信息\n    logger.error("An error occurred")\n    ```\n\n'

class InterceptHandler(logging.Handler):
    """Handles the emission of log records from the standard logging module to Loguru.
    
    This class intercepts log records generated by the standard Python logging module and forwards them to the Loguru logger for consistent handling, ensuring that all logs are managed uniformly across the Repository Agent project. This is particularly useful in a framework where maintaining consistent documentation and logging practices is crucial.
    
    Args:
        None
    
    Returns:
        None
    
    Raises:
        ValueError: If the record's levelname does not match any known Loguru levels.
    
    Note:
        See also: `set_logger_level_from_config` (configures the loguru logger with the specified log level and integrates it with the standard logging module).
    
    ---
    
    Emit a log record using Loguru.
    
    This function intercepts a logging.LogRecord from the standard library and emits it using the Loguru logger, ensuring accurate caller information and appropriate Loguru level mapping. This is part of the Repository Agent's logging mechanism to maintain consistent and detailed logs for automated documentation generation tasks.
    
    Args:
        record (logging.LogRecord): The log record to emit.
    
    Returns:
        None
    
    Raises:
        ValueError: If the specified levelname in the log record does not correspond to a valid Loguru level name.
    
    ---
    
    Configures the loguru logger with the specified log level and integrates it with the standard logging module.
    
    This function ensures that all logs are handled consistently across the application by configuring the loguru logger according to the provided settings. It is part of the Repository Agent framework, which automates documentation generation for Python projects.
    
    Args:
        log_level (str): The log level to set for loguru (e.g., "DEBUG", "INFO", "WARNING").
    
    Returns:
        None
    
    Raises:
        ValueError: If the record's levelname does not match any known Loguru levels.
    
    Note:
        See also: `InterceptHandler` (handles emission of log records from the standard logging module to Loguru)."""

    def emit(self, record: logging.LogRecord) -> None:
        """Emit a log record using Loguru.
    
    This method intercepts a logging.LogRecord from the standard library and emits it using the Loguru logger, ensuring accurate caller information and appropriate Loguru level mapping. This is part of the Repository Agent's logging mechanism to maintain consistent and detailed logs for automated documentation generation tasks.
    
    Args:
        record (logging.LogRecord): The log record to emit.
    
    Returns:
        None
    
    Raises:
        ValueError: If the specified levelname in the log record does not correspond to a valid Loguru level name.
    
    Note:
        See also: The Repository Agent leverages this method to ensure that all logging activities are consistent and detailed, which is crucial for maintaining accurate and up-to-date documentation."""
        level: str | int
        try:
            level = logger.level(record.levelname).name
        except ValueError:
            level = record.levelno
        frame, depth = (inspect.currentframe(), 0)
        while frame and (depth == 0 or frame.f_code.co_filename == logging.__file__):
            frame = frame.f_back
            depth += 1
        logger.opt(depth=depth, exception=record.exc_info).log(level, record.getMessage())

def set_logger_level_from_config(log_level):
    """Configures the loguru logger with the specified log level and integrates it with the standard logging module.
    
    This method ensures that all logs are handled consistently across the application by configuring the loguru logger according to the provided settings. It is part of the Repository Agent framework, which automates documentation generation for Python projects.
    
    Args:
        log_level (str): The log level to set for loguru (e.g., "DEBUG", "INFO", "WARNING").
    
    Returns:
        None
    
    Raises:
        ValueError: If the record's levelname does not match any known Loguru levels.
    
    Note:
        See also: `InterceptHandler` (handles emission of log records from the standard logging module to Loguru)."""
    logger.remove()
    logger.add(sys.stderr, level=log_level, enqueue=True, backtrace=False, diagnose=False)
    logging.basicConfig(handlers=[InterceptHandler()], level=0, force=True)
    logger.success(f'Log level set to {log_level}!')